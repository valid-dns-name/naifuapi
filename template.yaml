AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  newItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-newItem
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: newItem
      CodeUri: src/newItem
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
      Environment:
        Variables:
          TABLE_NAME: !Ref Items
          TABLE_ARN: !GetAtt Items.Arn
          BUCKET_NAME: !GetAtt CfDistribution.DomainName
  Items:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-Items
  QuickstartApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: QuickstartApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /items:
            get:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getwaifu.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
  getwaifu:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getwaifu
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: getwaifu
      CodeUri: src/get_waifu
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
      Environment:
        Variables:
          TABLE_NAME: !Ref Items
          TABLE_ARN: !GetAtt Items.Arn
      Events:
        QuickstartApiGETitems:
          Type: Api
          Properties:
            Path: /items
            Method: GET
            RestApiId: !Ref QuickstartApi
  waifubucket:
    DeletionPolicy: Delete
    Metadata:
      Comment: Bucket to store some data
    Properties:
      AccessControl: Private
      BucketName: !Sub cf-simple-s3-origin-${AWS::StackName}-${AWS::AccountId}
    Type: AWS::S3::Bucket
  waifubucketpolicy:
    Metadata:
      Comment: Bucket policy to allow cloudfront to access the data
    Properties:
      Bucket: !Ref waifubucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CfOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub arn:aws:s3:::${waifubucket}/*
    Type: AWS::S3::BucketPolicy
  CfDistribution:
    Metadata:
      Comment: A simple CloudFront distribution with an S3 origin
    Properties:
      DistributionConfig:
        Comment: A simple distribution with an S3 origin
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: false
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: none
            Headers:
              - Origin
            QueryString: false
          MaxTTL: 31536000
          MinTTL: 86400
          TargetOriginId: !Sub s3-origin-${waifubucket}
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http1.1
        IPV6Enabled: false
        Origins:
          - DomainName: !GetAtt waifubucket.DomainName
            Id: !Sub s3-origin-${waifubucket}
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CfOriginAccessIdentity}
        PriceClass: PriceClass_All
    Type: AWS::CloudFront::Distribution
  CfOriginAccessIdentity:
    Metadata:
      Comment: Access S3 bucket content only through CloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access S3 bucket content only through CloudFront
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)