AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  newnaifu:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-newItem
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: newItem
      CodeUri: src/newItem
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
      Environment:
        Variables:
          USER_NAIFUS: !Ref BaseNaifus
          TABLE_ARN: !GetAtt BaseNaifus.Arn
          BUCKET_NAME: !GetAtt CfDistribution.DomainName
  NaifuTokenToLovelyNaifu:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: token_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-lovely-naifus
  LovelyNaifuRarities:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: rarity
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-lovely-naifu-rarities
  QuickstartApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: QuickstartApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /lovely/naifu:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getwaifu.Arn}/invocations
              responses: {}
          /lovely/card:
            get:
              responses: {}
          /lovely/relic:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getrelic.Arn}/invocations
              responses: {}
          /lovely/apply/relic:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${applyrelic.Arn}/invocations
              responses: {}
          /lovely/apply/pack:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${applypack.Arn}/invocations
              responses: {}
      TracingEnabled: true
      Domain:
        DomainName: api.naifu.cafe
        CertificateArn: arn:aws:acm:us-east-2:062568520934:certificate/707359eb-0b4f-407a-b204-df28b4835a32
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
      EndpointConfiguration: REGIONAL
  getwaifu:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getwaifu
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: getwaifu
      CodeUri: src/get_waifu
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
      Environment:
        Variables:
          NAIFU_TABLE: !Ref NaifuTokenToLovelyNaifu
          NAIFU_ARN: !GetAtt NaifuTokenToLovelyNaifu.Arn
          BASE_NAIFUS: !Ref BaseNaifus
          BASE_NAIFUS_ARN: !GetAtt BaseNaifus.Arn
          RARITIES: !Ref LovelyNaifuRarities
          RARITIES_ARN: !GetAtt LovelyNaifuRarities.Arn
      Events:
        QuickstartApiGETitems:
          Type: Api
          Properties:
            Path: /lovely/naifu
            Method: GET
            RestApiId: !Ref QuickstartApi
  waifubucket:
    DeletionPolicy: Delete
    Metadata:
      Comment: Bucket to store some data
    Properties:
      AccessControl: Private
      BucketName: !Sub cf-simple-s3-origin-${AWS::StackName}-${AWS::AccountId}
    Type: AWS::S3::Bucket
  waifubucketpolicy:
    Metadata:
      Comment: Bucket policy to allow cloudfront to access the data
    Properties:
      Bucket: !Ref waifubucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CfOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub arn:aws:s3:::${waifubucket}/*
    Type: AWS::S3::BucketPolicy
  CfDistribution:
    Metadata:
      Comment: A simple CloudFront distribution with an S3 origin
    Properties:
      DistributionConfig:
        Comment: A simple distribution with an S3 origin
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: false
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: none
            Headers:
              - Origin
            QueryString: false
          MaxTTL: 31536000
          MinTTL: 86400
          TargetOriginId: !Sub s3-origin-${waifubucket}
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http1.1
        IPV6Enabled: false
        Origins:
          - DomainName: !GetAtt waifubucket.DomainName
            Id: !Sub s3-origin-${waifubucket}
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CfOriginAccessIdentity}
        PriceClass: PriceClass_All
    Type: AWS::CloudFront::Distribution
  CfOriginAccessIdentity:
    Metadata:
      Comment: Access S3 bucket content only through CloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access S3 bucket content only through CloudFront
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
  BaseNaifus:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: naifu_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-lovely-naifus
  getcard:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getcard
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: getcard
      CodeUri: src/getcard
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        QuickstartApiGETlovelycard:
          Type: Api
          Properties:
            Path: /lovely/card
            Method: GET
            RestApiId: !Ref QuickstartApi
      Environment:
        Variables:
          CARD_RARITIES: !Ref LovelyCardRarities
          CARD_RARITIES_ARN: !GetAtt LovelyCardRarities.Arn
          CARDS: !Ref LovelyCards
          CARDS_ARN: !Ref LovelyCards.Arn
  LovelyCards:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: card_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-lovely-items
  LovelyCardRarities:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: rarity
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: rarity
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-lovely-item-rarities
  applypack:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-applypack
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: applypack
      CodeUri: src/applypack
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        QuickstartApiPOSTlovelyapplypack:
          Type: Api
          Properties:
            Path: /lovely/apply/pack
            Method: POST
            RestApiId: !Ref QuickstartApi
      Environment:
        Variables:
          USER_NAIFUS: !Ref NaifuTokenToLovelyNaifu
          USER_NAIFUS_ARN: !GetAtt NaifuTokenToLovelyNaifu.Arn
          CARD_RARITIES: !Ref LovelyCardRarities
          CARDS: !Ref LovelyCards
          CARD_RARITIES_ARN: !GetAtt LovelyCardRarities.Arn
          CARDS_ARN: !GetAtt LovelyCards.Arn
          RELIC_COLLECTIONS: !Ref RelicCollections
          RELIC_COLLECTIONS_ARN: !Ref RelicCollections.Arn
  applyrelic:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-applyrelic
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: applyrelic
      CodeUri: src/applyrelic
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        QuickstartApiPOSTlovelyapplyrelic:
          Type: Api
          Properties:
            Path: /lovely/apply/relic
            Method: POST
            RestApiId: !Ref QuickstartApi
      Environment:
        Variables:
          USER_NAIFUS: !Ref NaifuTokenToLovelyNaifu
          USER_NAIFUS_ARN: !GetAtt NaifuTokenToLovelyNaifu.Arn
          RELICS: !Ref Relics
          RELICS_ARN: !GetAtt Relics.Arn
  getrelic:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getrelic
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: getrelic
      CodeUri: src/getrelic
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        QuickstartApiGETlovelyrelic:
          Type: Api
          Properties:
            Path: /lovely/relic
            Method: GET
            RestApiId: !Ref QuickstartApi
      Environment:
        Variables:
          RELICS: !Ref Relics
          RELICS_ARN: !GetAtt Relics.Arn
  RelicCollections:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: type
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: type
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  Relics:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: relic_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: relic_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)